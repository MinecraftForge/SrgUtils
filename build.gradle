import net.minecraftforge.gradleutils.PomUtils

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'org.cadixdev.licenser' version '0.6.1'
    id 'net.minecraftforge.gradleutils' version '2.+'
    id 'com.github.ben-manes.versions' version '0.46.0'
}

group 'net.minecraftforge'
version = gradleutils.getTagOffsetVersion()
println "Version: $version"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
}

repositories {
    mavenLocal()
    maven gradleutils.forgeMaven
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.powermock:powermock-core:2.0.9'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
}

test {
    useJUnitPlatform()
}

changelog {
    fromTag '0.4'
}

license {
    header = file('LICENSE-header.txt')
    newLine = false
    exclude '**/*.properties'
}

publishing {
    publications.register('mavenJava', MavenPublication) {
        from components.java

        artifactId = 'srgutils'

        pom {
            name = 'SRG Utils'
            description = 'Library for managing java obfuscation mappings in various formats.'
            url = 'https://github.com/MinecraftForge/SrgUtils'

            PomUtils.setGitHubDetails(pom, 'SrgUtils')

            license PomUtils.Licenses.LGPLv2_1

            developers {
                developer PomUtils.Developers.LexManos
            }
        }
    }

    repositories {
        maven gradleutils.getPublishingForgeMaven()
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}
